Dobrý den, vážená poroto, vážení diváci

Při stavbě robotů na různé soutěže jsem se setkal s problémem při zpracovávání dat z poměrně velkého množství senzorů které robot obsahuje - například náš loňský Eurobot měl 5 ultrazvukových měřáků vzdálenosti, enkodéry pro měření ujeté vzdálenosti a několik tlačítek, které sledují náraz do mantinelu. Když k tomu připočteme ještě data ze samotného řídícího programu, tvoří to značné množství dat, která je potřeba k ladění robota zobrazovat.

- ukazka dat z lonskyho eurobota
- nenasel sem zadny program ktery by to splnoval, ukazat ten slide?
- proto bylo cilem moji prace vytvorit program, ktery by toto *data v terminalu* dokazal zobrazit prehledneji
- vysledek vypada takto *analyzer* - popis
- ted bych se vratil k prezentaci
- Aplikace, kterou jsem vytvoril nese jmeno Lorris, je v C++....
- Priklady pouziti analyzeru
   - joystick
   - lajna

- Proxy
  - "...a ted se na tohoto robota muzu pripojit odkudkoliv z internetu"
- Shupito
  - programovani
  - barva
- Terminal
  - programovani 3pi   

-- ted?

Jiné zařízení
Jiný program
Minulý rok jsme na soutěž eurobot stavěli tohoto robota. Takový robot obsahuje poměrně velké množství senzorů - ultrazvukové měřáky vzdálenosti, pro detekci soupeře, na obou kolech jsou enkodéry, které měří ujetou vzdálenost a na každém rohu je tlačítko detekující náraz do mantinelu. Všechny tyto senzory , a k nim ještě výstup ze samotného programu robota, je potřeba při vývoji zobrazovat. Údaje z tohoto robota vypadají asi nějak takto. Je tam vše co robot dělá, údaje ze věech senzorů...ale není to příliš přehledné. Rozhodl jsem se proto vytvořit aplikaci, která všechna tato data zobrazí v přehledné formě, a když už, tak aby uměl i data ukládat a posílat do zařízení příkazy. Název pouhé "GUI" proto není příliš výstižný. Teď co znamená přehledně zobrazovat? Podle mě to znamená například takto: je to pohled zezhora na tohoto robota..popis

- telo
- ultra
  - cerveny
- tlacitka
- enkodery
- disk

aplikace
- Lorris
- C++ s Qt
- Linux a Win
- Open source
- na githubu
- stránky
  - popis
  - binarky
  - kompilace
  - video

- modularni sturktura
- jadro zastresuje celou aplikaci a pripojeni k jednotlivym zarizenim
- analyzer
  - analyzer je ta cast kterou jsem vám ukazoval na začátku
  - hlavnim ukolem je prehledne zobrazovat prichozi data
- proxy
  - tento modul vytvoří jednoduchý server
  - připojit z přes internet
  - 
- shupito
  - *toto*
  - programator
  - moje aplikace je ovladaci rozhrani


- analyzer
 - obsahuje scriptovací ja
amuž%nuje přehledné zobrazení všech údajů, a navíc obsahuje scriptovací jazyk který umožňuje s daty libovolně pracovat.

V analyzérů se data zobrazuji v tzv. widgetech, které si užival sám vytáhá na pracovní plochu, může je libovolně zmenšit/zvětšit nebo je přejmenovat. V horní části jsou vidět příchozí data, které se k widgetu přiřadí přetažením daného bytu na widget. Aplikace zobrazuje více typů widgetů, tohle je číslo, dalšími jsou například sloupcový bar nebo graf. Důležitým widgetem je script
 - uživatel si v něm může napsat krátký script, který může zpracovávat data prakticky v jakémkoliv formátu. Ze scriptu lze využít ostatní zobrazovací widgety.

//////////////////////////////////////////////////////////////////////////////


Zkusil jsem tedy najít nějákou aplikaci, která by splňovala mé požadavky, bohužel jsem nenašel žádnou, která by mi úplně vyhovovala, proto jsem se rozhodl vytvořit vlastní aplikaci.


Aplikace, kterou jsem vytvořil nese jméno Lorris, je napsaná v C++ s použitím Qt Frameworku a dokáže běžet pod MS Windows a Linuxem. 
Zdrojové kódy jsou uvolněné jako open-source a jsou dostupné v GIT repozitáři na serveru GitHub, na kterém jsem vytvořil i jednoduchý web s popisem programu, odkazy ke stažení spustitelných souborů pro Windows, návodem ke zkompilování a videem, ve kterém aplikaci představuji.
Program má modulární strukturu, díky čemuž může sjednotit několik nástrojů, které mají podobnou oblast použití. Aplikace obsahuje moduly Analyzér, který parsuje a zobrazuje data v grafické podobě, Proxy mezi sériovým portem a TCP socketem, která umožňuje připojení k zařízení (např. nějákému čipu) přes internet, modul pro obsluhu programátoru Shupito a Terminál.
Jednotlivé moduly se otevírají v záložkách, podobně jako stránky ve weebovém prohlížeči. Základní část poskytuje připojení k zařízení, správu záložek s moduly, úložiště pro nastavení aplikace a správu joysticku, zpracovávání dat probíhá v modulech. 

Moduly se mohou k zařízení připojit pomocí Sériového portu, TCP socketu nebo mohou jen načíst data ze souboru.


Prvním modulem který vám představím je Analyzér, který zpracovává přijatá data a zobrazuje je v grafických widgetech. Mám připravené video, ve kterém analyzér názorně představím. 
*POPIS videa* nebo naživo?

Widget:
- číslo
- sloupcový bar
- barva
- graf
- script

že další typy widgetů lze prakticky donekonečna přidávat


Proxy mezi sériovým portem a TCP socketem
- tento modul vytvoří server, na který je možné se přes internet připojit buďto z Lorris nebo jiného programu
- přeposílá data se sériového portu
- TODO? použití? nic mě nenapadá

Shupito
- Shupito je programátor mikročipů vytvořený Martinem Vejnárem
- Rozhrani SPI, PDI a JTAG
- modul dokáže shupito obsluhovat - číst, programovat a mazat čipy
- shupito má také schopnost vytvořit tunel pro RS232 linku z programovaného čipu do počítače. Lorris umí těto schopnosti využít - aktivní tunel se zobrazí jako nový typ připojení a pracuje se s ním stejně, jako kdyby to byl sériový port.


Terminál
- Klasický terminál
- Příchozí data zobrazuje buďto jako text (s podporou kontrolních znaků) nebo hex dump.
- odesílá stisky kláves
- podporuje ATmega bootloader, který umožňuje programování čipů přes bluetooth, bez programátoru.


Použití
 - Barevný senzor
- Enkodéry
- PID regulátor
- jízda po čáře
- eurobot




