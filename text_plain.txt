
Úvod
    Při stavbě robotů na soutěž Eurobot aj. jsem se setkal s problémem zpracovávání dat z poměrně velkého množství senzorů, které robot obsahuje, a jejich přehledného zobrazování. Nenašel jsem žádný program, který by mi vyhovoval - k dispozici jsou pouze komerční aplikace, které stojí poměrně velké množství peněz, anebo aplikace které dokáží zobrazovat pouze v jednom formátu - typicky graf. Z tohoto důvodu jsem se rozhodl napsat vlastní program.

Aplikace
    Svůj program jsem pojmenoval "Lorris" a je vytvořený v C++ a využívá Qt Framework (v4.7)*DOP: reference*, což je multiplatformní framework, který umožňuje spustit aplikaci na více systémech - testoval jsem na Debian Linux (Wheezy, 64bit) a Windows 7.

    Další použité knihovny: *DOP: reference*
    Qwt - kreslení grafů
    upravené QSerialDevice - připojení k sériovému portu
    upravený QHexEdit2 - hex editor 

    Program je navrhnutý jako modulární aplikace, aby mohl zastřešit několik samostatných částí, které však mají podobnou oblast použití.

    *DOP: pocet radek kodu, git, GPL?"

Moduly
    Každý modul se otevírá v samostatné záložce, přičemž je možné mít otevřeno více stejných modulů zároveň, a aby více modulů sdílelo jedno připojení (např. Teminál a Analyzér, oba pracující s jedním sériovým portem).

    *DOP: screenshot zalozek?*

    Současné moduly:
    Analyzér - zobrazování dat v grafických widgetech, hlavní část práce.
    Shupito - rozhraní pro obsluhu programátoru "Shupito" *DOP: Reference*.
    Terminál - terminál pro sériový port s podporou bootloaderu pro čipy ATmega*DOP: Reference*.

    Analyzér
        *DOP: screenshot analyzéru*

        Tento modul parsuje data přicházející sériovou linkou a zobrazuje je v grafických "widgetech". Zpracovaná data je možné uložit a později zase v programu otevřít. Předpokládá se, že data mají formát packetů.
        Struktura dat se nastavuje v samostatném dialogu, kde je možno nastavit délku packetu, jeho endianess*DOP: vysvetleni* přitomnost hlavičky a její obsah - statická data ("start byte"), délka packetu(pokud je proměnná), příkaz a ID zařízení. Podle příkazu a ID zařízení je možno později data filtrovat.

        *DOP: screenshot dialogu na strukturu dat?*

        Po nastavení struktury se přijatá data začnou po packetech zobrazovat v horní části okna, a v pravé části se zobrazí sloupeček s dostupnými zobrazovacími widgety. Widgety se dají pomocí drag&drop principu "vytahat" na plochu v prostřední části okna. Data se k widgetu přiřadí taktéž pomocí drag&drop, tentokrát přetažení prvního bytu dat na widget. Poté widget zobrazuje data tohoto bytu, nebo tento byte bere jako první, pokud jsou data delší. Aby bylo možné zpětně poznat který byte je k widgetu přiřazen, je po najetí myši na widget červeně zvýrazněn.
        Nastavení widgetu (jeho jméno, u čísla např. jeho datový typ apod.) jsou přistupná v kontextovém menu po pravém kliknutí myší na widget. Widgety je taktéž možné "uzamknout", aby nebylo možné je zavřít, měnit jejich pozici a velikost.

        Aplikace si také přijatá data ukládá - navigace je umožněna posuvníkem a boxem v horní části okna.

    Shupito

        *DOP: screenshot shupita*

        Shupito je programátor mikročipů vytvořený Martinem Vejnarem. Dokáže programovat mikrokontroléry pomocí ISP, PDI *DOP: zeptat se martina co všechno to zvládá*. Modul v mojí práci dokáže programátor Shupito obsluhovat - nastavovat výstupní napětí, číst a programovat paměť čipů (flash i EEPROM) a číst a měnit pojistky. Jako výstupní i vstupní data používá soubory ve formátu Intel HEX32 *DOP: reference*. Shupito dokáže pracovat také jako RS232 tunel, i tuto funkci program podporuje - aktivní tunel se zobrazí jako další typ připojení a je možné ho využívat v ostatních modulech.
        Komunikace s programátorem je naportována z oficiálního ovládacího programu (avr232client *DOP: reference*), který je však dostupný pouze pro MS Windows.


    Terminál
        *DOP: screenshot terminálu*
    
        Klasický terminál - zobrazuje data přijatá přes sériový port a posílá stisky kláves, obohacený o podporu bootloaderu pro mikrokontroléry AVR ATmega(bootloader byl taktéž napsaný Martinem Vejnarem), který umožňuje jejich programování přes RS232 linku. Informace o protokolu bootloaderu jsem získal z oficiálního programu určeného k programování přes tento bootlodaer, avr232client *DOP: reference*.


Možnosti dalšího rozšiřování programu
    Díky modulárnosti programu je možné poměrně jednoduše vytvořit další moduly, například modul pro ovládání robota přes bluetooth pomocí joysticku apod. Je možné také přidat další typy připojení - například socket, pokud jsou data nejdříve zpracována nějákým jiným programem.
    Co se týče Analyzéru, je možné implementovat další widgety - mám v plánu implementaci QtScriptu*DOP: reference*, který podstatně rozšíří možnosti parsování dat.
